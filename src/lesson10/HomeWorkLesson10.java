package lesson10;

public class HomeWorkLesson10 {
/*
    Міні проєкт "Щаслива родина"
    Суть проєкту: опис структури сім'ї з урахуванням того, що кожна людина має кровних родичів,
    а склад сім'ї може з часом змінюватися.
    До проходження теми "Колекції" всі домашні завдання повинні бути виконані з використанням
    масивів (НЕ використовуйте інтерфейси List, Set, Map, поки про це не буде прямо сказано у завданні).
    Об'єкти

    Завдання

            •	Створіть та опишіть класи: Домашній улюбленець (Pet), Людина (Human). Створіть конструктори
            для написаних класів. Створіть клас Main та у ньому створіть екземпляри описаних класів.
            •	Зробіть поля всіх класів приватними.
            •	Створіть та опишіть клас Сім'я (Family). Вважатимемо, що сім'я може створюватися двома людьми, які не розходяться і можуть народжувати/усиновлювати своїх дітей. Діти можуть дорослішати та йти з сім'ї, створюючи свою власну.
            •	Пере визначте методи equals() та hashCode() у всіх класах проєкту.
            •	У класі Family додайте метод deleteChild(Human child) з урахуванням наявності даних методів.

    Технічні вимоги:
            •	Опишіть у класі Pet такі поля:
    o	вид тварини (species), рядок (собака, кіт тощо)
    o	кличка (nickname)
    o	вік (age)
    o	Рівень хитрості (trickLevel) (ціле число від 0 до 100)
    o	звички (habits) (масив рядків)
            •	Опишіть у класі Pet та реалізуйте такі методи:
    o	поїсти (eat) (метод виводить на екран повідомлення Я ї'м!)
    o	відгукнутися (respond) (метод виводить на екран повідомлення Привіт, хазяїн. Я - [ім'я тварини]. Я скучив!)
    o	зробити домашню гидоту (foul) (метод виводить на екран повідомлення Потрібно добре замести сліди...)
            •	Опишіть у класу Human такі поля:
    o	Ім'я (name)
    o	Прізвище (surname)
    o	Рік народження (year), число
    o	Рівень IQ (iq) (ціле число від 0 до 100)
    o	Домашній улюбленець (pet) (об'єкт типу Pet)
    o	Мама (mother) (об'єкт типу Human)
    o	Тато (father) (об'єкт типу Human)

            •	Опишіть у класу Human та реалізуйте такі методи:
    o	привітати свого улюбленця (greetPet)("Привіт, [ім'я тварини]")
    o	описати свого улюбленця (describePet): (вивести на екран всю
        інформацію про свого вихованця: "У мене є [вид тварини], їй [вік тварини]
        років, він [дуже хитрий]/[майже не хитрий]". описи хитрості повинна залежати
        від рівня хитрості вихованця, якщо понад 50 -[дуже хитрий], якщо менше або
        дорівнює 50 -[майже не хитрий])
            •	Пере визначте метод toString() в обох класів;
    o	Клас Pet повинен виводити повідомлення наступного виду: dog{nickname='Rock',
        age=5, trickLevel=75, habits=[eat, drink, sleep]}, де dog - вид тварини;
    o	Клас Human повинен виводити повідомлення наступного виду: Human{name='Michael',
        surname='Karleone', year=1977, iq=90, mother=Jane Karleone, father=Vito Karleone, pet=dog{nickname=' Rock', age=5, trickLevel=75, habits=[eat, drink, sleep]}}
•	У класі Pet створіть конструктори:
    o	конструктор, що описує вид тварини та її прізвисько
    o	конструктор, що описує всі поля тварини
    o	Порожній конструктор
•	У класі Human створіть конструктори:
    o	конструктор, що описує ім'я, прізвище та рік народження
    o	конструктор, що описує ім'я, прізвище, рік народження, тата та маму
    o	конструктор, який описує всі поля
    o	Порожній конструктор
•	Оголосіть усі поля наявних класів як приватні. Додайте гетери та сетери;
    зробіть рефакторинг наявних методів з урахуванням змін.
•	Опишіть у класу Family наступні поля:
    o	мама mother (тип Human)
    o	тато father (тип Human)
    o	діти children (масив Human)
    o	домашній улюбленець pet (тип Pet)
•	Додайте гетери, сетери; пере визначте toString так щоб він показував всю
    інформацію про всіх членів сім'ї.
            •	У класі Family створіть конструктор:
    o	єдиною умовою створення нової сім'ї є наявність 2-х батьків, причому у батьків
        має встановлюватися посилання на поточну нову сім'ю, а сім'я створюється з порожнім масивом дітей.
            •	Зробіть рефакторинг класу Human з урахуванням структури Family:
    o	видаліть з Human всю інформацію, що дублюється в класі Family (Human повинен
        зберігати тільки інформацію, що описує себе)
    o	додайте поле family (тип Family) (тепер воно зберігає всю інформацію про сімейні дані людини)
    o	додайте поле family (тип Family) (тепер воно зберігає всю інформацію про сімейні дані людини)
    o	додайте необхідні гетери, сетери, конструктори; видаліть неактуальні конструктори
        та методи; зробіть рефакторинг методів привітати свого улюбленця, описати свого улюбленця, нагодувати
    o	Зробіть рефакторинг методу toString(). Він повинен виводити інформацію в наступному
        форматі: Human{name='Name', surname='Surname', year=1, iq=1, schedule=[[day, task], [day_2, task_2]]}
•	У Family опишіть методи:
    o	додати дитину addChild (приймає тип Human і додає її до масиву дітей; додає дитині'
        посилання на поточну родину)
    o	видалити дитину deleteChild (приймає індекс масиву та видаляє даний елемент;
        повертає логічне значення - чи був видалений елемент)
    o	отримати кількість осіб у сім'ї countFamily (батьки у сім'ї ніколи не змінюються;
        якщо відбувається зміна батьківського складу – це вже інша родина)
    o	Пере визначте метод toString()
•	Вирішіть, які поля варто використовувати для порівняння в методі equals()
    (наприклад, звички тварини можуть змінюватися).
            •	У класі Main створіть кілька сімей, щоб у кожного класу були використані
                всі можливі конструктори. Виведіть інформацію про кожну людину на екран.
•	У класі Main створіть маму, тата, дитину та її домашню тварину. Надайте всі необхідні
    посилання (у дитини на батьків та вихованця), щоб вийшла повноцінна сім'я. Викличте
    всі доступні методи у дитини (включаючи метод toString()) та у його вихованця.
    Необов'язкове завдання просунутої складності:
            •	Опишіть і реалізуйте метод нагодувати вихованця (feedPet) у класу Human,
                який приймає параметром логічний тип boolean "настав час годувати". Якщо час настав - господар годує вихованця, якщо час не настав, то рівень хитрості порівнюється з псевдовипадковим числом 0-100 java.util.Random, і господар годує, якщо рівень хитрості більший за згенероване число. Метод повинен виводити на екран результат (Хм... годувати я Джека[ім'я тварини]/Думаю, Джек не голодний.) і повертати логічний результат (true/false) - чи відбулося годування.
            •	У Family опишіть метод видалити дитину (deleteChild) (приймає тип Human
                і видаляє відповідний елемент). Метод має бути написаний з урахуванням
                наявності методів equals() та hashCode().
    Підказка: для того, щоб видалити правильний елемент з масиву Human-ів вам необхідно
    робити порівняння по полях, що ідентифікують саме дану людину (подумайте, які поля для цього підходять).
            •	Додайте до кожного класу статичний та нестатичний блоки ініціалізації.
    o	Статичний блок повинен виводити інформацію, що завантажується новий клас (вказати ім'я класу).
            o	Нестатичний блок повинен виводити інформацію на екран, що створюється новий
                об'єкт (вказати тип об'єкта).
    Методи повинні не просто додавати/видаляти елементи в масив Human, а й проводити необхідні
    модифікації (доданому/віддаленому елементу встановити/видалити посилання на поточну батьківщину).
    При видаленні елемента у масиві не повинно залишатися порожніх місць – необхідно створити новий масив.

*/

}
